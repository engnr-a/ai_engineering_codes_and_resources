from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA
from ibm_watsonx_ai.foundation_models.utils.enums import ModelTypes, DecodingMethods

import gradio as gr

import os
import dotenv

# Load the environment variables from the .env file
dotenv.load_dotenv()
API_KEY = os.getenv("API_KEY")

model_id = "meta-llama/llama-3-3-70b-instruct"

# The URL for the Frankfurt region
url = "https://eu-de.ml.cloud.ibm.com"

# The project_id 
project_id = "1d0fc49e-843a-4257-8f38-e07e1268b0a7"

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    # print(f"Loaded {len(loaded_document)} documents")
    # for i, doc in enumerate(loaded_document):
    #     print(f"Document {i}: {len(doc.page_content)} characters, Content: {doc.page_content[:100]}...")
    return loaded_document

def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=10,
        length_function=len
    )
    chunks = text_splitter.split_documents(data)
    return chunks

def watsonx_embedding():
    # embed_params = {
    #     #EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 30,
    # }

    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url=url,
        apikey=API_KEY, 
        project_id=project_id,
        #params=embed_params,
    )
    return watsonx_embedding

def vector_database(chunks):
    DB_PATH = "./pdf_chat_chroma_db"
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(chunks, 
                                     embedding_model, 
                                     persist_directory=DB_PATH 
                    )
    
    # 
    vectordb.persist() 
    return vectordb

## Retriever
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever

## LLM
def get_llm():
    model_id = "meta-llama/llama-3-3-70b-instruct"
    parameters = {
        #GenParams.DECODING_METHOD: DecodingMethods.GREEDY, 
        GenParams.DECODING_METHOD: DecodingMethods.SAMPLE, 
        #GenParams.MIN_NEW_TOKENS: 130, # this controls the minimum number of tokens in the generated output
        GenParams.MAX_NEW_TOKENS: 512,  # this controls the maximum number of tokens in the generated output
        #GenParams.TEMPERATURE: 0.5, # this randomness or creativity of the model's responses
        GenParams.TEMPERATURE: 0.7,  # More creativity
        GenParams.REPETITION_PENALTY: 1.2,  # Avoids repetition
    }
    
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url=url,
        apikey=API_KEY, 
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm


## QA Chain
def retriever_qa(file, query):
    llm = get_llm()
    retriever_obj = retriever(file)
    qa = RetrievalQA.from_chain_type(llm=llm, 
                                    chain_type="stuff", 
                                    retriever=retriever_obj, 
                                    return_source_documents=False)
    response = qa.invoke(query)
    return response['result']

# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="auto",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=5, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="AI Response:", lines=10, scale=2),
    title="RAG-Powered Document Q&A",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)



if __name__ == "__main__":
    rag_application.launch(server_name="127.0.0.1", server_port= 7860, share=False, debug=True)