from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA
from ibm_watsonx_ai.foundation_models.utils.enums import ModelTypes, DecodingMethods

import gradio as gr

import os
import dotenv

# Load the environment variables from the .env file
dotenv.load_dotenv()
API_KEY = os.getenv("API_KEY")

model_id = "meta-llama/llama-3-3-70b-instruct"

# The URL for the Frankfurt region
url = "https://eu-de.ml.cloud.ibm.com"

# The project_id 
project_id = "2e449891-a4a1-4672-bf91-0555b31dc696"

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

def main():
    print("Hello from ibm-rag-and-agentic-ai-course!")


def get_llm():
    model_id = "meta-llama/llama-3-3-70b-instruct"
    parameters = {
        #GenParams.DECODING_METHOD: DecodingMethods.GREEDY, 
        GenParams.DECODING_METHOD: DecodingMethods.SAMPLE, 
        #GenParams.MIN_NEW_TOKENS: 130, # this controls the minimum number of tokens in the generated output
        GenParams.MAX_NEW_TOKENS: 512,  # this controls the maximum number of tokens in the generated output
        #GenParams.TEMPERATURE: 0.5, # this randomness or creativity of the model's responses
        GenParams.TEMPERATURE: 0.7,  # More creativity
        GenParams.REPETITION_PENALTY: 1.2,  # Avoids repetition
    }
    
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url=url,
        apikey=API_KEY, 
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm

if __name__ == "__main__":
    model = get_llm()
    print(model.invoke("Hello llama ..."))
